/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javafxapplication9;




import javafx.animation.TranslateTransition;
import javafx.application.Application;
import javafx.beans.property.BooleanProperty;
import javafx.beans.property.SimpleBooleanProperty;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TextField;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.shape.Line;
import javafx.stage.Stage;
import javafx.util.Duration;


/**
 *
 * @author bcrobert
 */

public class Engineered extends Application {
    private final BooleanProperty drag = new SimpleBooleanProperty(this, "dragModeActive", true);
    public static void main(String[] args) {
        launch(args);
    }
    public CreateMenus mb = new CreateMenus();
    public createShapes cs = new createShapes();
    public MenuBar menuBar;
    public Menu File;
    public Menu Edit;
    public Menu Shapes;
    public Menu Lines;
    public MenuItem Textbox;
    public MenuItem DiagonalRightLine;
    public MenuItem DiagonalLeftLine;
    public MenuItem HorizontalLine;
    public MenuItem VerticalLine;
    public Line line;
      
    @Override
    public void start(Stage primaryStage) {
        
        final Pane pane = new Pane();
        pane.setPrefSize(800, 800);
        final VBox vb = new VBox();
        final BorderPane bp = new BorderPane();
        BorderPane.setAlignment(pane, Pos.CENTER);
        
        bp.setCenter(pane);
        final CheckBox dragModeCheckBox = new CheckBox("Drag?");
        BorderPane.setMargin(dragModeCheckBox, new Insets(10));
        bp.setBottom(dragModeCheckBox);
       
        
        drag.bind(dragModeCheckBox.selectedProperty());
        
        vb.setAlignment(Pos.TOP_LEFT);
        vb.setSpacing(10);
        vb.setPadding(new Insets(0, 10, 0, 10));
        vb.getChildren().addAll();
        
        
        primaryStage.setTitle("ForYourEntertainment");
        menuBar = mb.createMenu();
        File = mb.createMenuFile("File");
        Edit = mb.createMenuFile("Edit");
        Shapes = mb.createMenuFile("Shapes");
        Lines = mb.createMenuFile("Lines");
        Textbox = mb.createMenuItem("TextBox");
        DiagonalRightLine = mb.createMenuItem("DiagonalRight");
        DiagonalLeftLine = mb.createMenuItem("DiagonalLeft");
        HorizontalLine = mb.createMenuItem("Horizontal");
        VerticalLine = mb.createMenuItem("Vertical");
        
        Textbox.setOnAction(new EventHandler<ActionEvent>(){
            @Override
            public void handle (ActionEvent t){
                final Node textboxpanel = makeDraggable(cs.createTextbox());
                textboxpanel.setLayoutX(200);
                textboxpanel.setLayoutY(200);
                pane.getChildren().add(textboxpanel);
                }
        });
        
        
        DiagonalRightLine.setOnAction(new EventHandler<ActionEvent>(){
            @Override
            public void handle (ActionEvent t){
                final Node line = makeDraggable(cs.createDiagonalRightLine());
                line.setLayoutX(200);
                line.setLayoutY(200);
                pane.getChildren().add(line);
                
                }
        });
        
        DiagonalLeftLine.setOnAction(new EventHandler<ActionEvent>(){
            @Override
            public void handle (ActionEvent t){
                final Node line = makeDraggable(cs.createDiagonalLeftLine());
                line.setLayoutX(200);
                line.setLayoutY(200);
                pane.getChildren().add(line);
                
                }
        });
        
        HorizontalLine.setOnAction(new EventHandler<ActionEvent>(){
            @Override
            public void handle (ActionEvent t){
                final Node line = makeDraggable(cs.createHorizontalLine());
                line.setLayoutX(200);
                line.setLayoutY(200);
                pane.getChildren().add(line);
                
                }
        });
        
        VerticalLine.setOnAction(new EventHandler<ActionEvent>(){
            @Override
            public void handle (ActionEvent t){
                final Node line = makeDraggable(cs.createVerticalLine());
                line.setLayoutX(200);
                line.setLayoutY(200);
                pane.getChildren().add(line);
                
                }
        });
        Lines.getItems().addAll(DiagonalRightLine, DiagonalLeftLine, HorizontalLine, VerticalLine);
        Shapes.getItems().addAll(Textbox);
        menuBar.getMenus().addAll(File, Edit, Shapes, Lines);
        
        Scene scene = new Scene(new VBox(), 800, 800);
     
        ((VBox) scene.getRoot()).getChildren().addAll(menuBar, bp);
        
        primaryStage.setScene(scene);
        primaryStage.show();
    }
    


    private Node makeDraggable(final Node node) {
    final DragContext dragContext = new DragContext();
    final Group wrapGroup = new Group(node);

    wrapGroup.addEventFilter(MouseEvent.ANY, new EventHandler<MouseEvent>() {
      public void handle(final MouseEvent mouseEvent) {
        if (drag.get()) {
          // disable mouse events for all children
          mouseEvent.consume();
        }
      }
    });

    wrapGroup.addEventFilter(MouseEvent.MOUSE_PRESSED,
        new EventHandler<MouseEvent>() {
          public void handle(final MouseEvent mouseEvent) {
            if (drag.get()) {
              // remember initial mouse cursor coordinates
              // and node position
              dragContext.mouseAnchorX = mouseEvent.getX();
              dragContext.mouseAnchorY = mouseEvent.getY();
              dragContext.initialTranslateX = node.getTranslateX();
              dragContext.initialTranslateY = node.getTranslateY();
            }
          }
        });

    wrapGroup.addEventFilter(MouseEvent.MOUSE_DRAGGED,
        new EventHandler<MouseEvent>() {
          public void handle(final MouseEvent mouseEvent) {
            if (drag.get()) {
              // shift node from its initial position by delta
              // calculated from mouse cursor movement
              node.setTranslateX(dragContext.initialTranslateX
                  + mouseEvent.getX() - dragContext.mouseAnchorX);
              node.setTranslateY(dragContext.initialTranslateY
                  + mouseEvent.getY() - dragContext.mouseAnchorY);
            }
          }
        });

    return wrapGroup;
  }

    
    private static final class DragContext {
    public double mouseAnchorX;
    public double mouseAnchorY;
    public double initialTranslateX;
    public double initialTranslateY;
  }
    
}
